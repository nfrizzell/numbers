{
	"title":"0-1 Knapsack",
	"problem":"https://open.kattis.com/problems/knapsack",
	"solution":"The solution presented here utilizes the dynamic programming approach to the problem. Interestingly enough this problem is NP-complete, which means it scales exponentially with the size of the input. This may be a bit confusing, since the time complexity appears to be very much linear. The crux of this misunderstanding is length of the input in base-2 (i.e. log2(n)) vs. the value of the input (n), two very different considerations.",
	"remarks":"O(nW) time complexity, O(nW) memory complexity",
	"code":"#include <iostream>\n#include <stack>\n\nint main()\n{\n    int c, n;\n    while (std::cin >> c >> n)\n    {\n        int * weight = new int[n];\n        int * value = new int[n];\n\n        for (int i = 0; i < n; i++)\n        {\n            std::cin >> value[i] >> weight[i];\n        }\n\n        int ** table = new int*[n+1];\n        for (int i = 0; i <= n; i++)\n        {\n            table[i] = new int[c+1];\n            for (int j = 0; j <= c; j++)\n            {\n                table[i][j] = 0;\n            }\n        }\n\n        for (int i = 1; i <= n; i++)\n        {\n            for (int j = 1; j <= c; j++)\n            {\n                int maxValExcluding = table[i-1][j];\n                int maxValIncluding = 0;\n\n                if (weight[i-1] <= j)\n                {\n                    int remainingWeight = j - weight[i-1];\n                    maxValIncluding = value[i-1] + table[i-1][remainingWeight];\n                }\n\n                table[i][j] = std::max(maxValExcluding, maxValIncluding);\n            }\n        }\n\n        \n        int capacity = c;\n        std::stack<int> out;\n        for (int i = n; i > 0; i--)\n        {\n            if (table[i][capacity] > table[i-1][capacity])\n            {\n                out.push(i-1);\n                capacity -= weight[i-1];\n                if (capacity <= 0)\n                {\n                    break;\n                }\n            }\n        }\n        std::cout << out.size() << '\\n';\n        while (!out.empty())\n        {\n            std::cout << out.top() << \" \";\n            out.pop();\n        }\n        std::cout << '\\n';\n    }\n}\n\n"
}
